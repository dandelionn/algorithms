#include <functional>


Functorii sunt mai rapizi decat pointerii la functii.

Functori predefiniti:


Constructor               Apel                  Efect

plus<T>()             plus<T>()(x,y)            x + y
minus<T>()            minus<T>()(x,y)           x - y
multiplies<T>()       multiplies<T>()(x,y)      x * y
divides<T>()          divides<T>()(x,y)         x / y
modulus<T>()          modulus<T>()(x,y)         x % y   
equal_to<T>()         equal_to<T>()(x,y)        x == y
not_equal_to<T>()     not_equal_to<T>()(x,y)    x != y  
negate<T>()           negate<T>()(x)            -x 
less<T>()             less<T>()(x,y)            x < y
greater<T>()          greater<T>()(x,y)         x > y
less_equal<T>()       less_equal<T>()(x,y)      x <= y
greater_equal<T>()    greater_equal<T>()(x,y)   x >= y
logical_and<T>()      logical_and<T>()(x,y)     x && y
logical_or<T>()       logical_or<T>()(x,y)      x || y
logical_not<T>()      logical_not<T>()(x)       !x

int x=4,y=2;
if(greater<int>()(x,y))
   cout<<" x > y ";

multiplies<int> M;  ///Construieste un obiect functie
cout<<M(x,y);

Functori adaptori:
Adaptorul binder1st

  binder1st este o clasa template de functori,care transforma o functie binara intr-o functie unara.
Primeste doua argumente:un obiect functie func cu doua argumente si o valoare val,si returneaza
un obiect functie cu un singur argument,construit din func,cu primul argument legat la val.
In practica,pentru simplitate,in locul constructorului clasei se prefera utilizarea functiei
nemembre binder1st.

in loc de 
binder1st<less<int> >(less<int>(),5)  scrieti mai simplu bind1st(less<int>(),5).

Adaptorul binder2nd
    binder2nd este o clasa template de functori,care,la fel ca binder1st transforma o
functie binara intr-o functie unara.Primeste doua argumente:un obiect functie func cu doua 
argumente si o valoare val,si returneaza un obiect functie cu un singur argument,construit din 
func,cu al doilea argument legat la val.In practica,se prefera utilizarea functiei nemembre 
bind2nd.

in loc de 
binder2nd<greater<int> >(greater<int>(),6) scrieti mai simplu bind2nd(greater<int>,6)



Adaptori pentru pointeri la functii nemembre

ptr_fun() primeste ca argument un pointer la o functie si returneaza un functor.Are doua versiuni
supraincarcate:prima adapteaza un pointer la o functie unara,iar cea de a doua adapteaza un 
pointer la o functie binara.



Negatorii not1 si not2 primesc un predicat unar,respectiv binar si returneaza un functor care este
complementul predicatului original. Negatorii nu admit alte argumente decat functori si nu admit
oricare tip de functori,ci numai functori care mostenesc clasa unary_function.Din acest motiv,
o incercare de tipul acesta,nu va compila: find_if(a, a+5, not1(Pred));

eX:
template <class T>
bool Pred(T a,T b)   ///Predicat binar
{
    return a<b;
}
int a[]={20,10,30,10,40};
    sort(a,a+5,not2(ptr_fun(Pred<int>)));

ptr_fun() primeste un pointer la functia binara Pred<int>() si returneaza un predicat binar.Acesta,
la randul lui,este negat de catre not2().Se realizeaza o sortare descrescatoare,prin adaptarea
predicatului Pred().



Adaptori pentru pointeri la functii membre
mem_fun_ref()  are doua versiuni supraincarcate:una pentru functii membre fara parametri si una
               pentru functii membre cu un parametru(mem_fun_ref este sablon de functie)
mem_fun_ref_t(),cu acelasi rol,avand un t care sugereaza faptul ca este tip
              (mem_fun_ref_t este sablon de clasa)

Ex:struct Om{
    int varsta;
    char sex;
    void Scrie() const
    {cout<<varsta<<' '<<sex<<'\n';}
    void ScrieVarsta(char s) const
    {if (sex==s) cout<<varsta<<' ';}
};

int main()
{
    Om om[]={{18,'F'},{21,'M'},{16,'F'}};
    ///Apeleaza Om::Scrie() pentru fiecare obiect Om
    for_each(om,om+3,mem_fun_ref(&Om::Scrie));

    ///Apeleaza Om::ScrieVarsta() pentru fiecare fata
    for_each(om,om+3,bind2nd(mem_fun_ref(&Om::ScrieVarsta),'F'));
    
    return 0;
}
Rolul bind2nd in al doilea apel for_each: leaga 'F' de al doilea argument al mem_fun_ref.
Astfel,pentru fiecare element x din sirul om[],se realizeaza apelul x.Om::ScrieVarsta('F').

Secvente care contin pointeri la obiecte

mem_fun     (sablon de functie);
mem_fun_t   (sablon de clasa);   //Are acelasi rol
Grupul de sabloane mem_fun incapsuleaza un pointer la o functie membra.

mem_fun adapteaza un pointer la o functie membra si returneaza un functor care "stie" sa apeleze
functia membra,ca si cum ar lucra cu o functie nemembra.