#include <string>

Construirea stringurilor

1.string()    construieste un string vid

2.string(s)       	Construieste un string prin copiere
  string s1(s);         din obiectul s de tip string

3.string(s,p)           Construieste un string prin copierea
  string s1(s,p);       elementelor din stringul s,incepand cu pozitia p

4.string(s,p,n)         Construieste un string prin copierea a n elemente
  string s1(s,p,n);     din stringul s,incepand cu pozitia p

5.string(n,c)           Construieste un string cu n elemente de
  string s1(n,c);       valoare c fiecare

6.string(a)             Construieste un string prin copierea elementelor
  string s(a);          din a (a este un sir standard C)

7.string(a,n)           Construieste un string cu n elemente prin 
  string s(a,n);        copierea elementelor din a,care este string C

8.string(it1,it2)       Construieste un string prin copierea
  string s(it1,it2);    elementelor din intervalul [it1, it2);

string s="VOIOS!";
string s("abcd");
string s(&a[0], &a[18]);

s.length();  returneaza dimensiunea stringului,adica numarul de caratere
s.size();    gestionat de obiectul de tip string;

///s[11]='E';  Comportament nedefinit
try{
      s.at(11)='E';  ///Arunca exceptia out_of_range
}catch(exception e){
       cout<<"Exceptie!";
}

Functie de comparatie:(compara lexicografic) compare()
s1.compare(s2);    //compara s1 si s2 din punct de vedere lexicografic
                   //daca s1<s2,returneaza <0,...
s1.compare(p1,n1,s2,p2,n2);  //compara subsirul din s1 care incepe la
                         //pozitia p1 si are lungimea n1,cu subsirul din s2
                         //care incepe la pozitia p2 si are lungimea n2;
s1.comapare(p1,n1,a,p2,n2)   //compara subsirul din s1 care incepe la pozitia p1
                         //si are lungimea n1,cu subsirul din stringul C
                         //cu numele a,care incepe la pozitia p2 si are lungimea n2;
Operatori relationali:
>,>=,<,<=,==,!=

//Comparatiile se fac din punct de vedere lexicografic,caracter cu caracter,
de la inceputul catre sfarsitul secventei

string s1("MAR");
a[]="PAR";
s1 < a   // operatiile binare relationale admit ca unul dintre operanzi sa fie string C


Atribuiri:
s1.assign(s2);        //atribuie lui s1 o copie a stringului s2
s1.assign(s2,p,n);    //atribuie obiectului s1 n caractere copiate
                      //din s2 incepand cu pozitia p;
s1.assign("DOISPREZECE",p,n);  //atribuie obiectului s1 n caractere
                           //copiate din stringul C "DOISPREZECE",
                          //incepand cu pozitia p
s1.assign(n,'w');  //atribuie obiectului s1 n caractere 'W'
s1.assign("ABCDE",n);   //atribuie obiectului s1 primele n caractere din "ABCDE"


string::npos   //returneaza numarul maxim de caractere pe care il puteti stoca
               intr-un string
sintaxa de accesare a membrilor statici in C++:nume_clasa::nume_membru_static

Operatii de concatenare

operatorul +;
string + string
string + string C
string C + string
string + caracter

s1.append(a);       concateneaza stringul C a la sfarsitul lui s1
s1.append(a,p,n);   concateneaza n elemente din stringul C a la sfasitul lui s1,
                    incepand de la pozitia p
s2.append(s1);      concateneaza stringul s1(s2+=s1) la sfarsitul lui s2
s2+=' '; si s2+="I'm here"; concateneaza un caracter,respectiv un string C
s2.append(s3,p,n);  concateneaza n elemente din s3 la sfarsitul lui s2,
                    incepand de la pozitia p;
s2.append(v.begin()+1,v.begin()+3); concateneaza intervalul [v.begin(),v.begin()+3)
                           din vectorul v la sfarsitul lui s2.
cout<<s2.append(n,'.'); concateneaza n caractere '.';
cout<<s1.append("in zone",p,n);

s2.push_back(' ');

Conversii intre stringuri si siruri standard
s.c_str(); creeaza un sir de caractere terminat cu '\0',avand toate caracterele
           copiate din s si returneaza un pointer const char* care indica adresa acestuia

Operatii de inserare:
cout<<s1.insert(p,s2);  insereaza s2 in s1 la pozitia (indexul) p
cout<<s1.insert(p1,s2,p2,n2);   insereaza un substring al lui s2 in s1 la pozitia p1;
                       Substringul incepe in s2 la pozitia p2 si are lungimea n2;
cout<<s1.insert(p,"WWW"); insereaza stringul C "WWW" in s1 la pozitia p;
cout<<s1.insert(p,n,'K'); insereaza n caractere 'K' in s1,la pozitia p;
s1.insert(s1.end(),'T'); insereaza caracterul 'T' imediat inainte de pozitia
                         indicata de iteratorul s1.end()(inserare la sfarsit)

s1.insert(s1.end(),v.begin(),v.end()); 
            insereaza secventa [v.begin(),v.end()) din vectorul v imediat inaintea
            pozitiei indicate de iteratorul s1.end()  (inserare la sfarsit)

Operatii de stergere:
it=s.erase(begin()+1);                sterge elementul indicat de s.begin()+1;
it=s.erase(s.begin()+1,s.begin()+3);  sterge intervalul definit 
                                     de [s.begin()+1,s.begin()+3)
s.erase(p); sterge elementul de pe pozitia p;
s.erase(p); si s.erase(); sunt apeluri ale functiei s.erase(pos=0,n=npos) care  
                          sterge n caractere,incepand cu pozitia pos.

Operatii de inlocuire:

cout<<s1.replace(p,n,s2);  inlocuieste in s1 incepand cu pozitia p,un numar de n 
                           elemente, cu primele n caractere din s2.Daca s2.size()>n,
                           caracterele urmatoare din s2 nu suprascriu ci se insereaza
cout<<s1.replace(p1,n1,s2,p2,n2); inlocuieste in s1,n1 caractere,incepand cu pozitia
                                  p1,cu n2 caractere din s2,care incep la pozitia p2
cout<<s1.replace(s1.begin(),s1.begin()+1,s2);
                    inlocuieste caracterele din intervalul [s1.begin(),s1.begin()+1)
                    cu o copie a tuturor caracterelor din s2
cout<<s1.replace(s1.begin(),s1.begin()+8,s2.begin(),s2.end());


cout<<s1.replace(i,n1,n2,c);    inlocuieste n1 elemente din stringul curent,incepand cu pozitia
                                i,cu n2 elemente de valoare c.

cout<<s1.replace(it1,it2,s,n);  inlocuieste intervalul specificat de [it1,it2) cu primele 
                                n elemente din stringul C,s
 /\
 || nu e necesar sa folosesti cout:
ex:s1.replace(1,3,s2);

Functii de cautare:


1     size_type find(const string& s,size_type i=0) const

           returneaza indicele primei aparitii a stringului s in stringul apelant. 
           Cautarea incepe de indexul i.returneaza string::npos daca nu este gasit
2     size_type find(const char* s,size_type i=0) const
           returneaza indicele primei aparitii a sirului s in stringul apelant.
           Cautarea incepe la indexul i.Returneaza string::npos daca nu este gasit            
3     size_type find(const char* s,size_type i=0,size_type n=0) const
           Returneaza indicele primei aparitii a primelor n caractere ale sirului s
           in stringul apelant.Cautarea incepe la indexul i.Returneaza string::npos
           daca nu este gasit
           
4     size_type find(char c,size_type i=0) const
           Returneaza indicele primei aparitii a caracterului c in stringul apelant.
           Cautarea incepe la indexul i.Returneaza string::npos daca nu este gasit.
           
5     size_type find_first_of(const string& s,size_type i=0) const
           Returneaza indicele primului caracter din stringul apelant,care concide cu
           oricare caracter din s.Cauatrea incepe la indexul i.Returneaza string::npos
           daca niciun caracter nu este gasit
6     size_type find_first_of(const char* s,size_type i=0) const
           Returneaza indicele primului caracter din stringul apelant,care concide cu
           oricare caracter din sirul s.Cautarea incepe la indexul i.Returneaza string::npos
           daca niciun caracter nu este gasit
           
7     string substr(const size_type i=0,size_type n=npos) const
           Returneaza substringul de lungime n,care incepe la pozitia i in stringul
           apelant

      s1.rfind(s2); ,s1.rfind(s2,2); ,s1.rfind("CDE"); ,s1.rfind("CDE",2);,
      returneaza indicele ultimei aparitii in stringul apelant al substringului cautat

#include <iostream>
#include <string>
using namespace std;

void Scrie(string::size_type  i)
{
    if(i!=string::npos)
       cout<<"Gasit!Incepe la pozitia"<<i<<'\n';
    else
       cout<<"Nu s-a gasit\n";
}

int main()
{
    string s1("ABCDEF"), s2;
    string::size_type pos;
    cin>>s2;

    pos =s1.find(s2);                  //1
    Scrie(pos);
    pos =s1.find(s2,2);                //2           
    Scrie(pos);       
    pos =s1.find("CDE");               //3
    Scrie(pos);
    pos =s1.find("CDE",2);             //4
    Scrie(pos);
    pos =s1.find_first_of("KDAT");     //6
    Scrie(pos);
    cout<<s1.substr(2,3);              //7

    pos =s1.rfind(s2);
    Scrie(pos);
    pos =s1.rfind(s2,2);
    Scrie(pos);
    pos =s1.rfind("CDE");
    Scrie(pos);
    pos =s1.rfind("CDE",2);
    

    return 0;
}
     