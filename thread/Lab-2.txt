Race condition - problem
	
	1. Create a class "Wallet"
	2. Add a memeber(int)  = 0;
	3. Create a method addMoney(const int) const
	4. Inside the method create loop that will continue till the argument: money++ and heavy calculation simulation in every iteration
	5. Create a getMoney method
    
	6. Create a vector of threads (maybe 100 ??)
	7. Create a Wallet object
	8. Init all threads and pass the wallet object
	9. Inside the threads use addMoney method to add (of course) some money to the wallet
	10. Join all threads
    
	11. Check the value of the wallet, is it correct?
	
Race condition - solution
	
	1. Copy the Wallet class
	2. Adapt is to work for multithreading :))
	3. Use a mutex
	4. Use a lockguard

	5. Create a vector of threads (maybe 100 ??)
	6. Create a Wallet object
	7. Init all threads and pass the wallet object
	8. Inside the threads use addMoney method to add (of course) some money to the wallet
	9. Join all threads

	10. Check the value of the wallet, is it correct?